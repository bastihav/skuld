/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.skuld.web.api;

import de.skuld.web.model.InlineResponse200;
import de.skuld.web.model.ManagementTreesBody;
import de.skuld.web.model.MetaData;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-02-22T14:08:42.430Z[GMT]")
@Validated
public interface ManagementApi {

    @Operation(summary = "Create Tree", description = "Creates a new Tree that will hold precomputations for supplied date + specified amount of unix time prior to date", tags={ "dev API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Metadata", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MetaData.class))) })
    @RequestMapping(value = "/management/trees",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<MetaData> createTree(@Parameter(in = ParameterIn.DEFAULT, description = "date", required=true, schema=@Schema()) @Valid @RequestBody ManagementTreesBody body);


    @Operation(summary = "Delete Tree", description = "Delete Tree", tags={ "dev API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully deleted") })
    @RequestMapping(value = "/management/trees",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTree(@NotNull @Parameter(in = ParameterIn.QUERY, description = "UUID of tree to delete" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "uuid", required = true) String uuid);


    @Operation(summary = "Get or set the current status of the updater thread", description = "The updater thread automatically creates and deletes trees to keep the precomputations updated", tags={ "dev API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Metadata", content = @Content(mediaType = "applcation/json", schema = @Schema(implementation = InlineResponse200.class))) })
    @RequestMapping(value = "/management/updater",
        produces = { "applcation/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getSetUpdater(@Parameter(in = ParameterIn.QUERY, description = "Start/Stop the updater thread" ,schema=@Schema()) @Valid @RequestParam(value = "setRunning", required = false) Boolean setRunning);


    @Operation(summary = "Get metadata of current trees", description = "Returns metadata of all currently active trees", tags={ "Public API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Metadata", content = @Content(mediaType = "applcation/json", array = @ArraySchema(schema = @Schema(implementation = MetaData.class)))) })
    @RequestMapping(value = "/management/trees",
        produces = { "applcation/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<MetaData>> getTrees();

}

