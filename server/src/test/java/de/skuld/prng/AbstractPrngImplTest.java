package de.skuld.prng;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Interface to validate the java implementation of the prng
 */
public abstract class AbstractPrngImplTest {

  /**
   * Method that returns seeds used to generate test data
   *
   * @return seeds
   */
  long[] getSeeds() {
    return new long[]{-1L, 4294967295L};
    //return new long[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1634668549};
  }

  /**
   * Method that returns amount of bytes to generate per seed
   */
  private int getAmountPerSeed() {
    return 32;
    //return (int) Math.pow(2, 24);
  }

  /**
   * Method that returns the target byte arrays for all seeds that were given
   *
   * @param seeds seeds
   * @return byte array with random data
   */
  byte[][] getTargetBytes(long[] seeds) {
    int amountPerSeed = getAmountPerSeed();
    byte[][] result = new byte[seeds.length][];

    for (int i = 0; i < seeds.length; i++) {
      result[i] = getTargetBytes(seeds[i], amountPerSeed);
    }

    return result;
  }

  /**
   * Method that returns the actual byte arrays for all seeds that were given
   *
   * @param seeds seeds
   * @return byte array with random data
   */
  byte[][] getActualBytes(long[] seeds) {
    int amountPerSeed = getAmountPerSeed();
    byte[][] result = new byte[seeds.length][];

    for (int i = 0; i < seeds.length; i++) {
      result[i] = getActualBytes(seeds[i], amountPerSeed);
    }

    return result;
  }

  /**
   * Method that returns the target byte arrays for a given seed. This is usually implemented by
   * reading a file
   *
   * @param seed seed
   * @return random bytes generated by original prng
   */
  abstract byte[] getTargetBytes(long seed, int amountPerSeed);

  /**
   * Method that returns the target byte arrays for a given seed. This is always implemented by
   * using a PRNG of this project
   *
   * @param seed seed
   * @return random bytes generated by replicated prng
   */
  abstract byte[] getActualBytes(long seed, int amountPerSeed);

  @Test
  @Disabled
  public void validateRandomGenerator() {
    long[] seeds = getSeeds();
    System.out.println("java: ");
    //Arrays.stream(getActualBytes(seeds)).forEach(BytePrinter::printBytesAsHex);
    System.out.println(Arrays.deepToString(getActualBytes(seeds)));
    System.out.println("python: ");
    System.out.println(Arrays.deepToString(getTargetBytes(seeds)));
    //Arrays.stream(getTargetBytes(seeds)).forEach(BytePrinter::printBytesAsHex);
    //System.out.println(Arrays.deepToString(getActualBytes(seeds)));
    assertArrayEquals(getTargetBytes(seeds), getActualBytes(seeds));
  }
}
